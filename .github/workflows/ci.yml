name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest]
        python-version: ['3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Lint with ruff
      run: uv run ruff check .
    
    - name: Format check with ruff
      run: uv run ruff format --check .
    
    - name: Type check with pyright
      run: uv run pyright
    
    - name: Security check with bandit
      run: uv run bandit -c pyproject.toml -r .
    
    - name: Test with pytest
      run: uv run pytest -v --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  corpus-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Initialize test corpus
      run: uv run python scripts/corpus_cli.py init
    
    - name: Generate benign samples
      run: uv run python scripts/corpus_cli.py gen-benign
    
    - name: Generate defanged EICAR samples
      run: uv run python -m tests.tools.generate_corpus --root datasets
    
    - name: Create corpus manifest
      run: uv run python scripts/corpus_cli.py manifest
    
    - name: Test scanner on corpus
      run: |
        echo "Testing scanner on corpus..."
        set +e  # Don't exit on error
        uv run python -m uber_hacksaw.cli scan --path datasets --recursive --output json
        exit_code=$?
        set -e  # Re-enable exit on error
        if [ $exit_code -eq 1 ]; then
          echo "✅ Scanner correctly detected malware in corpus (exit code 1 as expected)"
        else
          echo "❌ Unexpected exit code: $exit_code"
          exit 1
        fi
    
    - name: Test EICAR detection via stdin
      run: |
        echo "Testing EICAR detection..."
        set +e  # Don't exit on error
        uv run python -m tests.tools.generate_corpus --also-stream-real \
        | uv run python -m uber_hacksaw.cli scan --stdin
        exit_code=$?
        set -e  # Re-enable exit on error
        if [ $exit_code -eq 1 ]; then
          echo "✅ EICAR detection working correctly (exit code 1 as expected)"
        else
          echo "❌ Unexpected exit code: $exit_code"
          exit 1
        fi
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ericktheredd5875/uber-hacksaw